// frontend/src/App.js
import React, { useState, useEffect, useRef } from 'react';
import ReactMarkdown from 'react-markdown';
import './App.css';

function App() {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [conversationId, setConversationId] = useState('default');
  const [conversations, setConversations] = useState([]);
  const [showThinking, setShowThinking] = useState(false);
  
  const messagesEndRef = useRef(null);

  // Fetch existing conversations on load
  useEffect(() => {
    fetchConversations();
  }, []);

  // Scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const fetchConversations = async () => {
    try {
      const response = await fetch('http://127.0.0.1:5000/api/conversations');
      const data = await response.json();
      setConversations(data);
    } catch (error) {
      console.error('Error fetching conversations:', error);
    }
  };

  const loadConversation = async (id) => {
    try {
      const response = await fetch(`http://127.0.0.1:5000/api/conversations/${id}`);
      const data = await response.json();
      setMessages(data);
      setConversationId(id);
    } catch (error) {
      console.error('Error loading conversation:', error);
    }
  };

  const deleteConversation = async (id) => {
    try {
      await fetch(`http://127.0.0.1:5000/api/conversations/${id}`, {
        method: 'DELETE',
      });
      fetchConversations();
      if (id === conversationId) {
        setMessages([]);
        setConversationId('default');
      }
    } catch (error) {
      console.error('Error deleting conversation:', error);
    }
  };

  // Function to extract think content and final answer from a response
  const extractThinkContent = (text) => {
    const thinkRegex = /<think>([\s\S]*?)<\/think>/g;
    const thinkMatches = [...text.matchAll(thinkRegex)];
    
    let thinking = '';
    let cleanedText = text;
    
    // Extract thinking content
    if (thinkMatches.length > 0) {
      thinking = thinkMatches.map(match => match[1].trim()).join('\n\n');
      
      // Remove all <think> tags from the original text
      cleanedText = text.replace(thinkRegex, '').trim();
    }
    
    return { thinking, cleanedText };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    // Add user message to UI immediately
    const userMessage = { role: 'user', content: input };
    setMessages([...messages, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const response = await fetch('http://127.0.0.1:5000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: input,
          conversation_id: conversationId,
        }),
      });

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      // Process thinking tags in the response
      const { thinking, cleanedText } = extractThinkContent(data.message);
      
      // Add assistant message to UI
      setMessages(prevMessages => [
        ...prevMessages,
        { 
          role: 'assistant', 
          content: cleanedText,
          thinking: thinking
        }
      ]);
      
      // Update conversation ID and refresh conversation list
      setConversationId(data.conversation_id);
      fetchConversations();
    } catch (error) {
      console.error('Error:', error);
      setMessages(prevMessages => [
        ...prevMessages,
        { role: 'assistant', content: `Error: ${error.message}` }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const newConversation = () => {
    setMessages([]);
    setConversationId('new_' + Date.now());
  };

  // Render message content with thinking support
  const renderMessage = (msg, index) => {
    // Determine the display name based on role
    const displayName = msg.role === 'user' ? 'You' : 'Assistant';
    
    return (
      <div key={index} className={`message ${msg.role}`}>
        <div className="message-content">
          <div className="message-header">
            <strong>{displayName}</strong>
            {msg.thinking && (
              <button 
                className="thinking-toggle"
                onClick={() => setShowThinking(prev => !prev)}
              >
                {showThinking ? 'Hide Thinking' : 'Show Thinking'}
              </button>
            )}
          </div>
          
          {/* Render thinking process if it exists and toggle is on */}
          {msg.thinking && showThinking && (
            <div className="thinking-process">
              <h4>Thinking Process:</h4>
              <pre>{msg.thinking}</pre>
            </div>
          )}
          
          {/* Main content */}
          <div className="main-content">
            <ReactMarkdown>{msg.content}</ReactMarkdown>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="app">
      <div className="sidebar">
        <button className="new-chat-btn" onClick={newConversation}>New Conversation</button>
        <div className="conversations-list">
          {conversations.map(id => (
            <div key={id} className="conversation-item">
              <button 
                className={conversationId === id ? 'active' : ''}
                onClick={() => loadConversation(id)}
              >
                {id}
              </button>
              <button 
                className="delete-btn"
                onClick={() => deleteConversation(id)}
              >
                X
              </button>
            </div>
          ))}
        </div>
      </div>
      
      <div className="chat-container">
        <div className="chat-header">
          <h1>Catalyst GPT</h1>
        </div>
        
        <div className="messages">
          {messages.length === 0 ? (
            <div className="empty-state">
              <h2>Start a new conversation</h2>
              <p>Type a message below to begin chatting with your local LLM</p>
            </div>
          ) : (
            messages.map((msg, index) => renderMessage(msg, index))
          )}
          {loading && (
            <div className="message assistant">
              <div className="message-content">
                <strong>Assistant</strong>
                <p className="loading">Thinking<span>.</span><span>.</span><span>.</span></p>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        
        <form className="input-form" onSubmit={handleSubmit}>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type your message..."
            disabled={loading}
          />
          <button type="submit" disabled={loading || !input.trim()}>
            Send
          </button>
        </form>
      </div>
    </div>
  );
}

export default App;